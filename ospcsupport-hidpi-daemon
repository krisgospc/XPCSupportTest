#!/usr/bin/python3

# OSPCSupport: Support tool for OSPC Computers
# Copyright (C) 2017 Open Source PCs
#
# This file is part of `ospcsupport`, a support tool for Open Source PC
# products.
#
# `ospcsupport` is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# `ospcsupport` is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with `ospcsupport`; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

"""
HiDPI daemon to workaround X Server scaling limitations.
"""

import time
start_time = time.monotonic()
import argparse
import os
import sys
import logging

from gi.repository import GLib


from gi.repository import GObject

import ospcsupport
from ospcsupport import hidpidaemon
from ospcsupport.daemon import load_json_conf


logging.basicConfig(
    level=logging.DEBUG,
    style='{',
    format='{asctime}  {levelname}  {message}',
)
log = logging.getLogger()

parser = argparse.ArgumentParser()
parser.add_argument('--model', help='force model rather than detecting it')
parser.add_argument('--debug', action='store_true', default=False,
    help='print loaded modules',
)
args = parser.parse_args()

if os.getuid() == 0:
    sys.exit('Error: ospcsupport-daemon must be run as user')
log.info('**** Process start at monotonic time %r', start_time)

disable = load_json_conf('/etc/ospcsupport-daemon.json').get('disable-hidpi')
log.info(disable)

if not args.model:
    args.model = (ospcsupport.get_product_version())
log.info('model: %r', args.model)

GObject.threads_init()
if disable != "True":
    hidpi = hidpidaemon.run_hotplug_autoscaling(args.model)
